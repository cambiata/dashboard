<div class="jumbotron">
	<h1>ufront-iso</h1>
	<p>Playground for learning ufront and finding out how it can use it for isomorphic web solutions. </p>
	
</div>

<h4><span class="label label-danger">Disclamer</span></h4><p>Please note that this demo is very basic and experimental! Doing it for the fun of learning!<br />/ Jonas</p>

<h3>Why isomorphic?</h3>

<p>The idea of isomorphic web solutions - as far as I understand it - is to combine the best of two worlds:</p>
<ul>
	<li>standard server round-trip soluitions: SEO-possibilities, linkability, every-impossoble-browser-compatibility etc.</li>
	<li>client side single-page solutions: speed, elegance, clever use of bandwidht etc.</li>
</ul>

<p>It shouldn't matter if an uri is served convetionally from the server or called for in the client using pushstate history or ajax. There should be no problem with older browsers not understanding pushstate, not being able to run client-side applications etc. - they will just request the pages as standard server requests.</p>			

<h3>Client side ufront</h3>

<p>UFront is built from the bottom to be used on async platforms (js, nodejs) as well as sync ones (php, neko etc.) This makes it possible to run a full-fledged ufront-mvc in the browser. This ufront-iso demo shows how that can be done by using customized request and response classes.</p>
	
<h1>About this demo</h1>
<h3>Things to note</h3>

<p>The very first request is performed by the server. It loads the page content and wraps it into the page template (bin/template.html). (The only client-side things happening when browser loading is ready are setting the "active" class for the current menu item - but this could also be done serverside using Jason O'Neil's [Detox](https://github.com/jasononeil/detox)!).</p>
<p>Further clicks on menu items are controlled by the client. The pushstate handler ([also a work of Jason's](https://github.com/jasononeil/detox)) prevents performing a server request. (Note that the anchor tags in the bin/template.html has a rel="pushstate" attribute.) Instead the client side ufront instance is kicked off, and handles the page request in one of two ways: If the page is present in the clientside cache, it is served from there. If it isn't, then it is loaded using an ajax request (to the server version of "itself"! :-)</p>
<p>Browser history navigation is catched by the client Pushstate wrapper, and the client side app serves them (from cache or ajax loading, if needed).</p>
<p>You can always do a page refresh for any valid url (for example by clicking F5 in the browser). The page is then fetched from the server and the client app is reloaded.</p>